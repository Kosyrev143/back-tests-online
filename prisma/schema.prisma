// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roles     Role[]
  Token     Token[]
  tests     Test[]
  Result    Result[]

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String   @map("user_agent")

  @@map("tokens")
}

enum Role {
  ADMIN
  USER
}

model Test {
  id          String     @id @default(uuid())
  title       String     @unique
  description String?    @default("")
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questions   Question[]
  categoryId  String
  Category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Result      Result[]

  @@map("tests")
}

model Question {
  id      String   @id @default(uuid())
  content String
  testId  String
  test    Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@map("questions")
}

model Answer {
  id String @id @default(uuid())

  content    String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  tests Test[]

  @@map("categories")
}

model Result {
  id     String @id @default(uuid())
  userId String
  testId String
  score  Float
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  test   Test   @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("results")
}
